type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: |+
    package machine

    fun main() {
    //    print("Write how many cups of coffee you will need:")
    //    val number = readLine()!!.toInt()


        data class Coffee(val water: Int, val milk: Int, val beans: Int, val price: Int)
        data class Storage(var waterAmount: Int, var milkAmount: Int, var beansAmount: Int, var cupsAmount: Int, var cash: Int)


        val espresso = Coffee(250, 0, 16, 4)
        val latte = Coffee(350, 75, 20, 7)
        val cappuccino = Coffee(200, 100, 12, 6)

        val storage = Storage(400, 540, 120, 9, 550)


        fun showMachineState() {
            println("The coffee machine has:")
            println("${storage.waterAmount} of water")
            println("${storage.milkAmount} of milk")
            println("${storage.beansAmount} of coffee beans")
            println("${storage.cupsAmount} of disposable cups")
            println("${storage.cash} of money")
        }

        fun askAction(): String {
            print("Write action (buy, fill, take): ")
            val action = readLine()

            return action!!
        }

        fun updateStorage(coffee: Coffee) {
            storage.waterAmount -= coffee.water
            storage.milkAmount -= coffee.milk
            storage.beansAmount -= coffee.beans
            storage.cupsAmount -= 1
            storage.cash += coffee.price
        }

        fun buyCoffee(type: Int) {
            when (type) {
                1 -> updateStorage(espresso)
                2 -> updateStorage(latte)
                3 -> updateStorage(cappuccino)
            }
        }

        fun handleBuy() {
            print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ")
            val userChoice = readLine()

            when (userChoice) {
                "1" -> buyCoffee(1)
                "2" -> buyCoffee(2)
                "3" -> buyCoffee(3)
            }
        }

        fun handleFill() {

            print("Write how many ml of water do you want to add:")
            val waterAmount = readLine()!!.toInt()
            print("Write how many ml of milk do you want to add:")
            val milkAmount = readLine()!!.toInt()
            print("Write how many grams of coffee beans do you want to add:")
            val beansAmount = readLine()!!.toInt()
            print("Write how many disposable cups of coffee do you want to add:")
            val cupsAmount = readLine()!!.toInt()

            storage.waterAmount += waterAmount
            storage.milkAmount += milkAmount
            storage.beansAmount += beansAmount
            storage.cupsAmount += cupsAmount
        }

        fun handleTake() {
            println("I gave you \$${storage.cash}")
            storage.cash = 0
        }

        showMachineState()
        val action = askAction()

        when (action) {
            "buy" -> handleBuy()
            "fill" -> handleFill()
            "take" -> handleTake()
            else -> println("Not supported action")
        }
        showMachineState()

    //    print("Write how many ml of water the coffee machine has:")
    //    val waterAmount = readLine()!!.toInt()
    //    print("Write how many ml of milk the coffee machine has:")
    //    val milkAmount = readLine()!!.toInt()
    //    print("Write how many grams of coffee beans the coffee machine has:")
    //    val beansAmount = readLine()!!.toInt()
    //    print("Write how many cups of coffee you will need:")
    //    val cupsAmount = readLine()!!.toInt()
    //
    //    val water = cupsAmount * 200
    //    val milk = cupsAmount * 50
    //    val beans = cupsAmount *15
    //
    //    val canMakeCupsWater = waterAmount/200
    //    val canMakeCupsMilk = milkAmount/50
    //    val canMakeCupsBeans = beansAmount/15
    //
    //    val canMakeCups = arrayOf(canMakeCupsWater, canMakeCupsMilk, canMakeCupsBeans).min()
    //
    //    if (cupsAmount > canMakeCups!!) {
    //        print("No, I can make only $canMakeCups cups of coffee")
    //    } else if (cupsAmount == canMakeCups) {
    //        print("Yes, I can make that amount of coffee")
    //    } else {
    //        print("Yes, I can make that amount of coffee (and even ${canMakeCups-cupsAmount} more than that)")
    //    }


    //    println("For $number cups of coffee you will need:")
    //    println("$water ml of water")
    //    println("$milk ml of milk")
    //    println("$beans g of coffee beans")

    //    println("Starting to make a coffee")
    //    println("Grinding coffee beans")
    //    println("Boiling water")
    //    println("Mixing boiled water with crushed coffee beans")
    //    println("Pouring coffee into the cup")
    //    println("Pouring some milk into the cup")
    //    println("Coffee is ready!")
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/364/implement
status: Solved
record: 5
